void discreteFT :: fft_recursive(float data[][2], int SIZE){
	//Check if N == 2 if so compute the basic size 2 DFT butterfly and return
	if (SIZE <= 2){
		float d0 = data[0][0];
		float d1 = data[1][0];
		data[0][0] = d0 + d1;
		data[0][1] = 0.0;
		data[1][0] = d0 - d1;
		data[1][1] = 0.0;
		return;
	}
	//Create the even and odd data out of the input array
	float data_even[SIZE/2][2];
	float data_odd[SIZE/2][2];

	// populate the even and odd data from the input array
	for (int i = 0; i < SIZE/2; i++){
		data_even[i][0] = data[2*i][0];
		data_even[i][1] = data[2*i][1];
		data_odd[i][0] = data[2*i+1][0];
		data_odd[i][1] = data[2*i+1][1];
	}

	//Recursively treat the even and odd indexed input arrays as SIZE/2 DFT's
	this->fft_recursive(data_even, SIZE/2);
	this->fft_recursive(data_odd, SIZE/2);

	//Once the even and odd DFT's are calculated and returned perform the FFT math
	//X(k) = Even(k) + W(N/SIZE*k%N) * Odd(k)
	//Add a threshold filter for close to zero values (same as with the N^2 DFT)
	for (int k = 0; k < SIZE/2; k++){
		int W_index = N/SIZE*k;
		int EO_index = k;
		float WXOdd [2];
		WXOdd[0] = this->W[W_index][0]*data_odd[EO_index][0] - this->W[W_index][1]*data_odd[EO_index][1];
		WXOdd[1] = this->W[W_index][0]*data_odd[EO_index][1] + this->W[W_index][1]*data_odd[EO_index][0];
		data[k][0] = data_even[EO_index][0] + WXOdd[0];
		data[k][1] = data_even[EO_index][1] + WXOdd[1];
		data[k+SIZE/2][0] = data_even[EO_index][0] - WXOdd[0];
		data[k+SIZE/2][1] = data_even[EO_index][1] - WXOdd[1];
	}
}
